{"ast":null,"code":"/* \nWhats the purpose of this function?\nInitially the audio files were streamed from the backend to the frontend using a URL aka blobUrl.\nHowever, with the introduction of the authorization thingy this was not possible anymore (without \n    a serious security breach eg adding the authorization token as part of the blobUrl).\nAs an alternative solution to using the html5 audio component, the following function uses the \nWeb Audio Api. Code taken from: \nhttps://stackoverflow.com/questions/48277432/load-html5-audio-from-dynamic-content-provider-with-authentication\n\nResources:\nhttps://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\n*/export default function streamAudioWithAuth(blobURL,authToken){console.log(\"Attempting to stream from\");console.log(blobURL);// create context\nvar audioCtx=new(window.AudioContext||window.webkitAudioContext)();// create source\nvar source=audioCtx.createBufferSource();// route source\nsource.connect(audioCtx.destination);// prepare request\nvar request=new XMLHttpRequest();request.open('GET',blobURL,true/* async */);request.responseType='arraybuffer';request.onload=function(){// on load callback\n// get audio data\nvar audioData=request.response;// try to decode audio data\naudioCtx.decodeAudioData(audioData,function(buffer){// on success callback\nconsole.log(\"Successfully decoded\");// set source\nsource.buffer=buffer;// .. do whatever you want with the source\n// e.g. play it\nsource.start(0);// or stop\n// source.stop();\n},function(e){// on error callback\nconsole.log(\"An error occurred\");console.log(e);});};request.setRequestHeader(\"Authorization\",\"Bearer \".concat(authToken));request.send();}","map":{"version":3,"names":["streamAudioWithAuth","blobURL","authToken","console","log","audioCtx","window","AudioContext","webkitAudioContext","source","createBufferSource","connect","destination","request","XMLHttpRequest","open","responseType","onload","audioData","response","decodeAudioData","buffer","start","e","setRequestHeader","send"],"sources":["/Users/sema/tagtag/client/src/components/helpers/audioStreamWithAuth.js"],"sourcesContent":["/* \nWhats the purpose of this function?\nInitially the audio files were streamed from the backend to the frontend using a URL aka blobUrl.\nHowever, with the introduction of the authorization thingy this was not possible anymore (without \n    a serious security breach eg adding the authorization token as part of the blobUrl).\nAs an alternative solution to using the html5 audio component, the following function uses the \nWeb Audio Api. Code taken from: \nhttps://stackoverflow.com/questions/48277432/load-html5-audio-from-dynamic-content-provider-with-authentication\n\nResources:\nhttps://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\n*/\nexport default function streamAudioWithAuth(blobURL, authToken) {\n\n    console.log(\"Attempting to stream from\");\n    console.log(blobURL);\n\n    // create context\n    let audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n\n    // create source\n    let source = audioCtx.createBufferSource();\n\n    // route source\n    source.connect(audioCtx.destination);\n\n    // prepare request\n    let request = new XMLHttpRequest();\n    request.open('GET', blobURL, true /* async */);\n    request.responseType = 'arraybuffer';\n\n    request.onload = function () {\n        // on load callback\n\n        // get audio data\n        let audioData = request.response;\n\n        // try to decode audio data\n        audioCtx.decodeAudioData(audioData,\n            function (buffer) {\n                // on success callback\n                console.log(\"Successfully decoded\");\n\n                // set source\n                source.buffer = buffer;\n\n                // .. do whatever you want with the source\n                // e.g. play it\n                source.start(0);\n                // or stop\n                // source.stop();\n            },\n            function (e) {\n                // on error callback\n                console.log(\"An error occurred\");\n                console.log(e);\n            });\n    };\n    request.setRequestHeader(\"Authorization\", `Bearer ${authToken}`);\n    request.send();\n}\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA,cAAe,SAASA,oBAAT,CAA6BC,OAA7B,CAAsCC,SAAtC,CAAiD,CAE5DC,OAAO,CAACC,GAAR,CAAY,2BAAZ,EACAD,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAEA;AACA,GAAII,SAAQ,CAAG,IAAKC,MAAM,CAACC,YAAP,EAAuBD,MAAM,CAACE,kBAAnC,GAAf,CAEA;AACA,GAAIC,OAAM,CAAGJ,QAAQ,CAACK,kBAAT,EAAb,CAEA;AACAD,MAAM,CAACE,OAAP,CAAeN,QAAQ,CAACO,WAAxB,EAEA;AACA,GAAIC,QAAO,CAAG,GAAIC,eAAJ,EAAd,CACAD,OAAO,CAACE,IAAR,CAAa,KAAb,CAAoBd,OAApB,CAA6B,IAAK,WAAlC,EACAY,OAAO,CAACG,YAAR,CAAuB,aAAvB,CAEAH,OAAO,CAACI,MAAR,CAAiB,UAAY,CACzB;AAEA;AACA,GAAIC,UAAS,CAAGL,OAAO,CAACM,QAAxB,CAEA;AACAd,QAAQ,CAACe,eAAT,CAAyBF,SAAzB,CACI,SAAUG,MAAV,CAAkB,CACd;AACAlB,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAEA;AACAK,MAAM,CAACY,MAAP,CAAgBA,MAAhB,CAEA;AACA;AACAZ,MAAM,CAACa,KAAP,CAAa,CAAb,EACA;AACA;AACH,CAbL,CAcI,SAAUC,CAAV,CAAa,CACT;AACApB,OAAO,CAACC,GAAR,CAAY,mBAAZ,EACAD,OAAO,CAACC,GAAR,CAAYmB,CAAZ,EACH,CAlBL,EAmBH,CA1BD,CA2BAV,OAAO,CAACW,gBAAR,CAAyB,eAAzB,kBAAoDtB,SAApD,GACAW,OAAO,CAACY,IAAR,GACH"},"metadata":{},"sourceType":"module"}